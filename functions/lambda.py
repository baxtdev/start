"""Анонимные функции могут содержать лишь одно выражение, но и 
выполняются они быстрее. 
Анонимные функции создаются с помощью инструкции lambda. 
Кроме этого, 
их не обязательно присваивать переменной, как делали мы инструкцией def func():"""


func =(lambda x, y: x + y)
print(func(2,3))

# creat_dict=(lambda *args:args) 
# print(creat_dict(1,2,12,1))
# # print((lambda x, y: x + y)(1, 2))

# #Напишите lambda-функцию, которая умножает входное число на заданный коэффициент.
# multiply_by = lambda x, factor: x * factor

# # Пример использования
# result = multiply_by(5, 3)
# print(result)  # Ожидаемый результат: 15

# #Напишите lambda-функцию, которая возвращает True, если число четное, и False в противном случае.
# is_even = lambda x: x % 2 == 0

# # Пример использования
# print(is_even(10))  # Ожидаемый результат: True
# print(is_even(7))   # Ожидаемый результат: False



# # Напишите lambda-функцию, которая возвращает квадрат входного числа. Затем используйте ее в генераторе списка для создания списка квадратов чисел от 1 до 5.

# squares = lambda x: x ** 2

# # Генератор списка
# squares_list = [squares(i) for i in range(1, 6)]

# print(squares_list)
# # Ожидаемый результат: [1, 4, 9, 16, 25]
# #